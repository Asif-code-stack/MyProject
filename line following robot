ARDUINO UNO LINE FOLLOWER ROBOT CODE EXPLANATION 

At first, we will define the pins, which will make our coding easy. The pins which are connected to enable pins of the L293D module is called en1 or en2. The pins connected to the input pins of the L293D are defined as input1, input2, input3, input4 pins.  The sensor, which is connected to the right side of the line follower is called R_sensor and the sensor which is connected to the left side is called the L_sensor.

#define en1 9

#define input1 6

#define input2 7

#define en2 11

#define input3 10

#define input4 8

#define L_sensor  4

#define R_sensor 3

 

In the void setup, we will set the pins en1, en2, input1, input2, input3, input4 as output pins, and pins L_sensor and R_sensor are set as input pins. We will be using the analog write command to write a value of 250 on the enable pins. The problem of using digital pins to connect with a enable pin is that by using digital pins, you can either output a voltage of 5V (high value) or a 0V (low value), but by using analog write command on analog pins, you can output, voltage ranging from 0 to 5V. If you write an analog value of 0 on the analog pin, then the output from that analog pin will be 0V. if you write an analog value of 255 on the analog pin, then the output from that analog pin will be 5V. You can use the below formula to find the value needed to write on the analog pin to get the desired voltage.

Value = (voltage needed/5) * 255.

The voltage needed will be the desired output voltage.

By using the above formula, you will get the value, which will be needed to write on the analog pin to get the desired voltage as output.

The reason for connecting the analog pins to the enable pin is, by changing the voltage at the enable pins, we can vary the speed of the motor. There may be situations in which you desire to slow down your line follower, in that case, you can just vary the value of that analog pin. And for the serial monitor’s initializing part, it is used for debugging purposes.

void setup() {

  pinMode(en1, OUTPUT);

  pinMode(en2, OUTPUT);

  pinMode(input1, OUTPUT);

  pinMode(input2, OUTPUT);

  pinMode(input3, OUTPUT);

  pinMode(input4, OUTPUT);

  pinMode(L_sensor, INPUT);

  pinMode(R_sensor, INPUT);

  Serial.begin(9600);

      analogWrite(en1,250);

    analogWrite(en2, 250);

}

void loop() {

Input1 and input2 pins are related to motor 1, and input3 and input4 pins are related to the motor 2. If input1 and input2 are high and low value, it rotates in one direction, and if input1 and input2 are low and high value, the motor rotates in the direction opposite to the previous direction. When it comes to finding when to switch on/off the motors, it depends on the sensors.  If both the sensors are giving logical high value, it means that the black line is in between the sensor and we need to switch ON both the motors. This makes the line follower move forward. The below code does the same, it reads the sensor’s output and if both the sensor’s output is logical high value then both the motors are switched ON.

  if((digitalRead(L_sensor) == HIGH) && (digitalRead(R_sensor) == HIGH)){

    Serial.println(" Left and Right sensors are high");

    digitalWrite(input1, HIGH);

    digitalWrite(input2, LOW);

    digitalWrite(input3, HIGH);

    digitalWrite(input4, LOW);

  }

If the right sensor is giving digital low value, it means that the black track is not in between the IR sensors and the line follower is crossing the black track from the right side. Now, we need to turn the line follower towards the right. The below code stops the motor connected to the right side and switches ON the left side motor. This will be continued until both the sensors started giving logic high as output.

  else if((digitalRead(L_sensor) == HIGH) && (digitalRead(R_sensor) == LOW)){

    Serial.println(digitalRead(L_sensor));

    Serial.println(digitalRead(R_sensor));

    digitalWrite(input1, LOW);

    digitalWrite(input2, LOW);

    digitalWrite(input3, HIGH);

    digitalWrite(input4, LOW);

  }

If the left sensor is giving digital low value, it means that the black track is not in between the sensors and the line follower is crossing the black track from the left side. Now, we need to turn the line follower towards the left. The below code stops the motor connected to the left side and switches ON the right side motor. This will be continued until both the sensors started giving logic high as output.

  else if((digitalRead(L_sensor) == LOW) && (digitalRead(R_sensor) == HIGH)){

     Serial.println(" Left Low");

    Serial.println(digitalRead(" Right HIGH"));

    digitalWrite(input1, HIGH);

    digitalWrite(input2, LOW);

    digitalWrite(input3, LOW);

    digitalWrite(input4, LOW);    

  }

If both the sensors are giving digital low value as output, then the motor is switched off. This condition is the terminate condition.

  else {

    digitalWrite(input1, LOW);

    digitalWrite(input2, LOW);

    digitalWrite(input3, LOW);
